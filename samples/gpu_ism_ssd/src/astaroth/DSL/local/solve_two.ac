#include "../prerequisites.h"

//MR: needs to be generated automatically depending on the chosen physics

auxiliary Field3 BETA_UU
auxiliary Field3 BETA_AA
auxiliary Field  BETA_RHO
auxiliary Field  BETA_SS

auxiliary Field3 ERROR_UU
auxiliary Field3 ERROR_AA
auxiliary Field  ERROR_RHO
auxiliary Field  ERROR_SS

output real uux_initial_max
output real uuy_initial_max
output real uuz_initial_max
       
output real aax_initial_max
output real aay_initial_max
output real aaz_initial_max

output real rho_initial_max
output real ss_initial_max




//TP: tested to work on 10-apr-2025
Kernel twopass_solve_intermediate(PC_SUB_STEP_NUMBER step_num, real dt) {
  if(lcourant_dt)
  {
  	write( UU, rk3_intermediate(previous(UU),   duu_dt(step_num), step_num, dt) )
  	write( RHO, rk3_intermediate(previous(RHO), drho_dt(step_num), step_num, dt) )
  	write( SS, rk3_intermediate(previous(SS),   denergy_dt(step_num), step_num, dt) )
  	write( AA, rk3_intermediate(previous(AA),   daa_dt(step_num), step_num, dt) )
  }
  else
  {
  	maximum_error = 0.0 
  	maximum_error = rkf4_update(duu_dt(step_num),step_num,dt,ERROR_UU,BETA_UU,UU,uux_initial_max,uuy_initial_max,uuz_initial_max,maximum_error,AC_dt_ratio,AC_dt_epsi)
  	maximum_error = rkf4_update(daa_dt(step_num),step_num,dt,ERROR_AA,BETA_AA,AA,aax_initial_max,aay_initial_max,aaz_initial_max,maximum_error,AC_dt_ratio,AC_dt_epsi)
  	maximum_error = rkf4_update(drho_dt(step_num),step_num,dt,ERROR_RHO,BETA_RHO,RHO,rho_initial_max,maximum_error,AC_dt_ratio,AC_dt_epsi)
  	maximum_error = rkf4_update(denergy_dt(step_num),step_num,dt,ERROR_SS,BETA_SS,SS,ss_initial_max,maximum_error,AC_dt_ratio,AC_dt_epsi)
  	if(step_num == 4) reduce_max(maximum_error,AC_maximum_error)
  }
}

fixed_boundary Kernel twopass_solve_final(int step_num){
  if (lcourant_dt)
  {
  	write( UU, rk3_final(previous(UU), value(UU), step_num) )
  	write( RHO, rk3_final(previous(RHO), value(RHO), step_num) )
  	write( SS, rk3_final(previous(SS), value(SS), step_num) )
  	write( AA, rk3_final(previous(AA), value(AA), step_num) ) 
  }
}
#include "steps_two.h"
